{"version":3,"sources":["components/Navigation/Navigation.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","components/FaceRecognition/FaceRecognition.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","style","display","justifyContent","paddingRight","className","Logo","tilt_default","options","max","height","width","paddingTop","src","alt","ImageLinkForm","_ref","onInputChange","OnButtonSubmit","type","onChange","onClick","Rank","FaceRecognition","imageUrl","box","id","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","app","Clarifai","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","displayFaceBox","console","log","setState","calculateFaceLocation","response","clarifaiFaceBox","outputs","data","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","catch","err","particles_default","params","components_Navigation_Navigation","components_Logo_Logo","components_Rank_Rank","components_ImageLinkForm_ImageLinkForm","components_FaceRecognition_FaceRecognition","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kUAWeA,SARI,WACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,QAAS,OAAQC,eAAgB,WAAYC,aAAc,SACpEN,EAAAC,EAAAC,cAAA,KAAGK,UAAU,2CAAb,iCCWGC,SAZF,WACT,OACIR,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACXP,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAMM,UAAU,oBAAoBG,QAAS,CAAEC,IAAM,IAAMR,MAAO,CAAES,OAAQ,IAAKC,MAAO,MACpFb,EAAAC,EAAAC,cAAA,OAAKK,UAAU,kBACXP,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACW,WAAY,MAAOD,MAAO,QAASD,OAAQ,QAASG,IAAI,wDAAwDC,IAAI,cCctIC,SApBO,SAAAC,GAAuC,IAApCC,EAAoCD,EAApCC,cAAeC,EAAqBF,EAArBE,eACpC,OACIpB,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,KAAGK,UAAU,cAAb,gFACAP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,UACVP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gCACXP,EAAAC,EAAAC,cAAA,SAAOK,UAAU,qBACVc,KAAK,OACLC,SAAUH,IAEjBnB,EAAAC,EAAAC,cAAA,UAAQK,UAAU,sDACVgB,QAASH,GADjB,eCCLI,EAbF,WACT,OACIxB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YAAf,uBAGAP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBAAf,QCOGkB,SAZS,SAAAP,GAAuB,IAApBQ,EAAoBR,EAApBQ,SAAUC,EAAUT,EAAVS,IACjC,OACI3B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACXP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBACXP,EAAAC,EAAAC,cAAA,OAAK0B,GAAG,aAAab,IAAKW,EAAUV,IAAI,GAAGH,MAAM,QAAQD,OAAO,SAChEZ,EAAAC,EAAAC,cAAA,OAAKK,UAAU,eAAeJ,MAAO,CAAC0B,IAAKF,EAAIG,OAAQC,MAAOJ,EAAIK,SAAUC,OAAQN,EAAIO,UAAWC,KAAMR,EAAIS,iDCIvHC,EAAM,IAAIC,IAASC,IAAI,CAACC,OAAQ,qCAEhCC,EAAmB,CACvBC,UAAW,CACVC,OAAO,CACLC,MAAO,IACPC,QAAS,CACRC,QAAQ,EACRC,WAAY,QAkEHR,cA3Db,SAAAA,IAAa,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAZ,IACbS,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAV,GAAAe,KAAAH,QAQAI,eAAiB,SAAC5B,GAChB6B,QAAQC,IAAI9B,GACZqB,EAAKU,SAAS,CAAC/B,IAAKA,KAXTqB,EAcbW,sBAAwB,SAACC,GACvB,IAAMC,EAAkBD,EAASE,QAAQ,GAAGC,KAAKC,QAAQ,GAAGC,YAAYC,aAClEC,EAAQC,SAASC,eAAe,cAChCxD,EAAQyD,OAAOH,EAAMtD,OACrBD,EAAS0D,OAAOH,EAAMvD,QAC5B,MAAM,CACJwB,QAASyB,EAAgBU,SAAW1D,EACpCiB,OAAQ+B,EAAgBW,QAAU5D,EAClCoB,SAAUnB,EAASgD,EAAgBY,UAAY5D,EAC/CqB,UAAYtB,EAAUiD,EAAgBa,WAAa9D,IAvB1CoC,EA2Bb7B,cAAgB,SAACwD,GACf3B,EAAKU,SAAS,CAACkB,MAAOD,EAAME,OAAOjC,SA5BxBI,EA+Bb5B,eAAiB,WACf4B,EAAKU,SAAS,CAAChC,SAAUsB,EAAK8B,MAAMF,QAEpCvC,EAAI0C,OAAOC,QAAQ1C,IAAS2C,kBAAmBjC,EAAK8B,MAAMF,OACvDM,KAAK,SAAAtB,GACJZ,EAAKO,eAAeP,EAAKW,sBAAsBC,MAEhDuB,MAAM,SAAAC,GACL5B,QAAQC,IAAI2B,MArClBpC,EAAK8B,MAAQ,CACTF,MAAO,GACPlD,SAAU,GACVC,IAAK,IALIqB,wEA4CX,OACEhD,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACmF,EAAApF,EAAD,CAAWM,UAAU,YACnB+E,OAAQ7C,IAEVzC,EAAAC,EAAAC,cAACqF,EAAD,MACAvF,EAAAC,EAAAC,cAACsF,EAAD,MACAxF,EAAAC,EAAAC,cAACuF,EAAD,MACAzF,EAAAC,EAAAC,cAACwF,EAAD,CAAevE,cAAegC,KAAKhC,cAAeC,eAAgB+B,KAAK/B,iBACvEpB,EAAAC,EAAAC,cAACyF,EAAD,CAAiBjE,SAAUyB,KAAK2B,MAAMpD,SAAUC,IAAKwB,KAAK2B,MAAMnD,cAtDtDiE,aCdEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOnG,EAAAC,EAAAC,cAACkG,EAAD,MAAShC,SAASC,eAAe,SD0H3C,kBAAmBgC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.311e83d3.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Navigation = () => {\n    return (\n        <nav style={{display: 'flex', justifyContent: 'flex-end', paddingRight: '20px'}}>\n            <p className='f3 link dim white underline pa3 pointer'> Sign Out</p>\n        </nav>\n    );\n}\n\nexport default Navigation;","import React from 'react';\nimport Tilt from 'react-tilt';\nimport './Logo.css'\n//import brain from './brain.png';\n\nconst Logo = () => {\n    return (\n        <div className=\"ma4\">\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 55 }} style={{ height: 150, width: 150 }} >\n                <div className=\"Tilt-inner pa3\"> \n                    <img style={{paddingTop: '2px', width: '150px', height: 'auto'}} src=\"http://hanatemplate.com/images/winking-face-gif-1.gif\" alt=\"logo\"/> \n                </div>\n            </Tilt>\n        </div>\n    );\n}\n\nexport default Logo;","import React from 'react';\nimport './ImageLinkForm.css';\n\n\nconst ImageLinkForm = ({ onInputChange, OnButtonSubmit }) => {\n    return (\n        <div>\n           <p className='f3 white b'>This app will detect faces in your images. Paste any link to an image below.</p>\n           <div className='center'>\n                <div className='form center pa4 br3 shadow-5'>\n                    <input className='f4 pa2 w-70 center' \n                           type='text' \n                           onChange={onInputChange}>\n                    </input>\n                    <button className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple' \n                            onClick={OnButtonSubmit}> \n                            Detect\n                    </button>\n                </div>\n           </div>\n        </div>\n    );\n}\n\nexport default ImageLinkForm;","import React from 'react';\n\nconst Rank = () => {\n    return (\n        <div>\n            <div className='white f3'>\n                KS, your rank is...\n            </div>\n            <div className='white f1 ma0'>\n                #1\n            </div>\n        </div>\n    );\n}\n\nexport default Rank;","import React from 'react';\nimport './FaceRecognition.css';\n\nconst FaceRecognition = ({ imageUrl, box }) => {\n    return (\n        <div className='center ma'>\n            <div className='absolute mt2'>\n                <img id='inputimage' src={imageUrl} alt=\"\" width='500px' height='auto'/>\n                <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FaceRecognition;","import React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\n\n\n // Instantiate a new Clarifai app by passing in your API key.\nconst app = new Clarifai.App({apiKey: 'f25a16fb782a48a397cdca16d0574832'});\n\nconst particlesOptions = {\n  particles: {\n   number:{\n     value: 100,\n     density: {\n      enable: true,\n      value_area: 700\n     }\n   }\n  }            \n}\n\nclass App extends Component {\n  constructor(){\n\t\tsuper();\n\t\tthis.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n\t\t}\n  }\n  \n  displayFaceBox = (box) => {\n    console.log(box);\n    this.setState({box: box});\n  }\n\n  calculateFaceLocation = (response) => {\n    const clarifaiFaceBox = response.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return{\n      leftCol: clarifaiFaceBox.left_col * width,\n      topRow: clarifaiFaceBox.top_row * height,\n      rightCol: width - (clarifaiFaceBox.right_col * width),\n      bottomRow : height - (clarifaiFaceBox.bottom_row * height)\n    }\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  OnButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input});\n    // Predict the contents of an image by passing in a URL.\n    app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      .then(response => {\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className='particles'\n          params={particlesOptions}\n          />\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm onInputChange={this.onInputChange} OnButtonSubmit={this.OnButtonSubmit}/>\n        <FaceRecognition imageUrl={this.state.imageUrl} box={this.state.box}/> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}